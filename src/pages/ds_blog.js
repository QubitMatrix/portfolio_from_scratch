export default function DSBlog (){
    return(<div id="ds-blog-mid"><h3><u>Data Structures for Beginners(A complete guide):</u></h3><p>Most of us see a question and just start typing out some logic that comes to our mind. Most of the times we don’t give importance to which approach is to be followed. While a program can have many possible answers there is only a few which is optimal, as programmers our aim is to find the most optimal solution.</p><p>So how can we do this?<br/>The answer is <b>Data Structures and Algorithms</b>.<br/>With these two ‘weapons’ we can solve any complex question and also make our approach optimal.</p><p>In this post we are going to cover the basics about Data Structures.</p>
    <h4 style={{marginBottom:"-10px"}}>Topics covered:</h4><ol><li>Importance of Data Structures</li><li>Sample statistic to show need for Data Structures</li><li>List of Data Structures</li></ol><p>For those who are already familiar with this topic head over to the <a href="#">cheatsheet</a><br/><br/><em>Each Data structure is a vast topic by itself, due to this reason many topics are only discussed on a very basic level and there is a lot more to learn about them. I have tried to keep it as short as possible, still it can be a 15 to 20 minutes read. So grab your cup of coffee and dive in!!!</em></p><br/>
    <p>Let's start of with the main question.<br/>Why should I use Data Structures in my logic?</p><p>Imagine you have a whole rack of books scattered everywhere without any specific order or arrangement. You would take a really long time to search for one book right.<br/>But what if you took a little extra time to arrange it in the right position? Wouldn’t it save you a lot of time in all future searches for a book.<br/>That’s what data structures are about. It makes the data more organised for the purpose and makes future operations on it easier and faster, if the data is inserted in the right order (i.e., using the appropriate data structure)<br/>It is very important to choose the right structure based on the need and application. We should consider which operation is done the most and choose a structure which can optimise that operation.</p>
    <p>Let's take a simple example:<br/>You want to search for some of your favourite books in your large collection of books(example of insert once, search multiple times)<br/><br/>Approach 1:<br/><u>Using <b>List</b> structure</u><br/>You had arranged all yours books in a random order in your racks. Now you will have to search the collection linearly to find the book and worst still if you had forgotten that your friend had borrowed that book, you will end up searching the entire collection for no reason.<br/>Time complexity:O(n)[linear complexity] for each search<br/><br/>Approach 2:<br/><u>Using <b>Binary Search Tree</b>(or binary search on sorted list)</u><br/>Say you had arranged the list in alphabetical order. You can check the middle book first, if it comes after the name of your favourite book then search the second half, or else search the first half(known as divide and conquer method)<br/>You have now reduced the time complexity to O(log<sub>2</sub>n)[logarithmic time complexity]<br/>Now if your familiar with time complexities you may question how is this efficient if it is not sorted cause major sorting techniques take a time of O(n log<sub>2</sub>n) and then an additional O(log<sub>2</sub>n) for binary search while searching linearly would take only O(n)<br/>Here is where the matter of which operation is performed the most comes into play, in this example sorting would be done once but we are doing search operation multiple times, in the long run Binary search proves to be more efficient than linear search.<br/><br/>Approach 3:(the most efficient for unique data)<br/><u>Using <b>Hashmaps</b></u><br/>Now hashmaps is a data structure that can be used for unique data or data with unique keys.<br/>If your library racks had a number for each position and you were able to find a unique value(called hash value) for each book using some function(called hash function) then you can place it in that position. Now when you want to search for your book all you have to do is find the hash value from the hash function and go to that position and take your book.<br/>We have now found a way to search the book in constant time independant of your total number of books.<br/>This is called constant time complexity, denoted by O(1).</p><br/>
    <p>Now that we have understood the need for Data Structures let's dive into the various types of data structures</p><p style={{marginTop:"35px"}}>Mainly Data Structures are of two types:<dl><dt>Linear(Eg: list,stack,queue,hashmaps(sets in python))<dd>In this type, the elements may be placed randomly or sequentially in the computer memory based on the implementation, but the access is always sequential.</dd></dt><dt>Non-Linear(Eg: Tree,Graph)<dd>In this type, the elements may be placed randomly or sequentially in the computer memory and even the access can be sequential or random.</dd></dt></dl></p>
    <p>For all the data structures the main operations that we can perform are: create,insert,delete,search,destroy</p>
    </div>);
}